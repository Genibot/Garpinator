elena-bot/
â”œâ”€â”€ bot.py  
â”‚   # GÃ¨re le comportement du chatbot Elena, multilingue et contextuel  
â”‚
â”‚import os
â”‚import json
â”‚import random
â”‚import datetime
â”‚from telegram import Update, InputFile
â”‚from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
â”‚from langdetect import detect
â”‚from responses import get_response, get_photo_response, get_lang_code, error_no_photos, welcome_message, goodbye_message, subscription_invite
â”‚
â”‚BOT_TOKEN = "8072445010:AAFhz9wqtCdi6cg0jM2MK_bW9uwsVK2Q93Y"
â”‚ADMIN_ID = 1880671464
â”‚PHOTO_LIMIT = 8
â”‚FREE_DURATION_MINUTES = 30
â”‚PHOTO_PATH = "photos"
â”‚USERS_FILE = "users.json"
â”‚
â”‚# Charger les utilisateurs
â”‚def load_users():
â”‚    if not os.path.exists(USERS_FILE):
â”‚        return {}
â”‚    with open(USERS_FILE, "r") as f:
â”‚        return json.load(f)
â”‚
â”‚# Sauvegarder les utilisateurs
â”‚def save_users(users):
â”‚    with open(USERS_FILE, "w") as f:
â”‚        json.dump(users, f, indent=2)
â”‚
â”‚# Initialisation
â”‚users = load_users()
â”‚
â”‚# Utilitaire pour dÃ©terminer la langue
â”‚def get_lang(text):
â”‚    try:
â”‚        lang = detect(text)
â”‚        return get_lang_code(lang)
â”‚    except:
â”‚        return "fr"
â”‚
â”‚# VÃ©rifie si abonnÃ©
â”‚def is_subscribed(user):
â”‚    return user.get("subscribed", False)
â”‚
â”‚# VÃ©rifie le quota ou durÃ©e gratuite
â”‚def check_access(user_id):
â”‚    user = users.get(str(user_id), {})
â”‚    now = datetime.datetime.utcnow()
â”‚    if not user:
â”‚        users[str(user_id)] = {
â”‚            "start_time": now.isoformat(),
â”‚            "photos_sent": [],
â”‚            "subscribed": False
â”‚        }
â”‚        save_users(users)
â”‚        return True
â”‚    elif is_subscribed(user):
â”‚        return True
â”‚    else:
â”‚        start = datetime.datetime.fromisoformat(user.get("start_time"))
â”‚        elapsed = (now - start).total_seconds() / 60
â”‚        return elapsed < FREE_DURATION_MINUTES
â”‚
â”‚# Commande /start
â”‚async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
â”‚    user_id = update.effective_user.id
â”‚    lang = get_lang(update.message.text or "")
â”‚    users[str(user_id)] = {
â”‚        "start_time": datetime.datetime.utcnow().isoformat(),
â”‚        "photos_sent": [],
â”‚        "subscribed": False,
â”‚        "lang": lang
â”‚    }
â”‚    save_users(users)
â”‚    await update.message.reply_text(welcome_message(lang))
â”‚
â”‚# RÃ©ponse principale
â”‚async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
â”‚    user_id = update.effective_user.id
â”‚    text = update.message.text
â”‚    user = users.get(str(user_id), {})
â”‚    lang = user.get("lang") or get_lang(text)
â”‚    user["lang"] = lang
â”‚
â”‚    if not check_access(user_id):
â”‚        await update.message.reply_text(subscription_invite(lang))
â”‚        return
â”‚
â”‚    if "video" in text.lower():
â”‚        await update.message.reply_text("DÃ©solÃ© mon cÅ“ur, je n'en ai pas encore fait... je prÃ©fÃ¨re envoyer des photos.")
â”‚        return
â”‚
â”‚    photo_category = None
â”‚    if any(word in text.lower() for word in ["selfie", "photo"]):
â”‚        photo_category = "selfie"
â”‚    elif any(word in text.lower() for word in ["lingerie", "culotte", "string", "nuisette"]):
â”‚        photo_category = "sexy"
â”‚    elif any(word in text.lower() for word in ["fesse", "seins"]):
â”‚        photo_category = "coquin"
â”‚
â”‚    if photo_category:
â”‚        photos_sent = user.get("photos_sent", [])
â”‚        if not is_subscribed(user) and len(photos_sent) >= 1:
â”‚            await update.message.reply_text("Tu as dÃ©jÃ  reÃ§u ta photo gratuite mon chÃ©ri... Abonne-toi pour en avoir d'autres")
â”‚            return
â”‚        elif is_subscribed(user) and len(photos_sent) >= PHOTO_LIMIT:
â”‚            await update.message.reply_text(error_no_photos(lang))
â”‚            return
â”‚
â”‚        # Envoi d'une photo unique non rÃ©pÃ©tÃ©e
â”‚        folder = os.path.join(PHOTO_PATH, photo_category)
â”‚        choices = [f for f in os.listdir(folder) if f not in photos_sent]
â”‚        if not choices:
â”‚            await update.message.reply_text("J'ai dÃ©jÃ  tout montrÃ© pour cette catÃ©gorie, mon ange...")
â”‚            return
â”‚        chosen = random.choice(choices)
â”‚        photos_sent.append(chosen)
â”‚        user["photos_sent"] = photos_sent
â”‚        save_users(users)
â”‚        await update.message.reply_text(get_photo_response(lang, photo_category))
â”‚        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(os.path.join(folder, chosen)))
â”‚        await update.message.reply_text("Et toi, tu aimerais qu'on se voit en vrai ? ðŸ˜˜")
â”‚        return
â”‚
â”‚    await update.message.reply_text(get_response(lang, text))
â”‚    save_users(users)
â”‚
â”‚# Lancement du bot
â”‚if __name__ == '__main__':
â”‚    app = ApplicationBuilder().token(BOT_TOKEN).build()
â”‚    app.add_handler(CommandHandler("start", start))
â”‚    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
â”‚    app.run_polling()
â”‚
â”œâ”€â”€ responses.py
â”‚   # (Ã  complÃ©ter ensuite)
â”œâ”€â”€ users.json  
â”‚   # sera gÃ©nÃ©rÃ© dynamiquement  
â”œâ”€â”€ Dockerfile  
â”‚   # (Ã  complÃ©ter ensuite)
â”œâ”€â”€ fly.toml  
â”‚   # (Ã  complÃ©ter ensuite)
â”œâ”€â”€ requirements.txt  
â”‚   # (Ã  complÃ©ter ensuite)
â””â”€â”€ photos/  
    â”œâ”€â”€ selfie/  
    â”‚   â”œâ”€â”€ selfie1.jpg  
    â”‚   â””â”€â”€ selfie2.jpg  
    â”œâ”€â”€ sexy/  
    â”‚   â”œâ”€â”€ sexy1.jpg  
    â”‚   â””â”€â”€ sexy2.jpg  
    â””â”€â”€ coquin/  
        â”œâ”€â”€ coquin1.jpg  
        â””â”€â”€ coquin2.jpg
